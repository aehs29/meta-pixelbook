parameters:
  build_branch: 'master'
  machine: ''

steps:
- bash: |
    for k in ${KERNELS};
    do
        echo "Building minimal chromebook image for ${MACHINE} with kernel ${k}"
        cd ~/poky
        source oe-init-build-env
        echo "MACHINE = \"${MACHINE}\"" >> ./conf/local.conf
        echo "PREFERRED_PROVIDER_virtual/kernel = \"${k}\"" >> ./conf/local.conf
        echo "${EXTRA_LOCALCONF}" >> ./conf/local.conf
        echo "Building with the following configuration:"
        tail -n 10 conf/local.conf
        if [ -z $(BBTARGET) ]; then
            bitbake chromebook-image-minimal
        else
            bitbake $(BBTARGET)
        fi

        # The pipeline will only detect an error if the last command failed
        eCode=$?

        # If were running out of time sync the sstate
        echo ""
        echo ""
        echo "Checking system's uptime"
        uptime=`cat /proc/uptime | cut -d ' ' -f 1`
        uptime=${uptime%.*}
        echo "Current uptime: $uptime"
        if [ $uptime -gt 14400 ]; then
            echo "Uptime greater than 4 hrs, proceeding to sync shared state"
            # Sync sstate after building the target to save up time
            # This path is hardcoded inside the container
            source ~/work/1/s/azp-scripts/azp-helpers.sh
            check_freespace
            SASW_TOKEN="$(SASW_TOKEN)" sync_sstate
        fi

        # Exit after syncing sstate if we had an error
        if [ $eCode -ne 0 ]; then
            echo "Error while building image"
            exit $retVal
        fi
    done;
  condition: succeededOrFailed()
  displayName: 'Build minimal chromebook image'

- bash: |
    source azp-scripts/azp-helpers.sh
    check_freespace
    SASW_TOKEN="$(SASW_TOKEN)" sync_sstate
  condition: succeededOrFailed()
  displayName: 'Sync sstate'
