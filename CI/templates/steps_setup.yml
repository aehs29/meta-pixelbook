steps:
- bash: |
    ###
    ###  Set branches
    ###
    if [ ${{ parameters.build_branch }} == "gatesgarth" ]; then
      echo "##vso[task.setvariable variable=buildbranch;]refs/heads/gatesgarth"
      echo "##vso[task.setvariable variable=branchname;]gatesgarth"
    elif [ ${{ parameters.build_branch }} == "dunfell" ]; then
      echo "##vso[task.setvariable variable=buildbranch;]refs/heads/dunfell"
      echo "##vso[task.setvariable variable=branchname;]dunfell"
    else
      echo "##vso[task.setvariable variable=buildbranch;]refs/heads/master"
      echo "##vso[task.setvariable variable=branchname;]master"
    fi

    ###
    ###  Set kernel
    ###
    if [ ${{ parameters.kernel }} == "yocto" ]; then
      echo "##vso[task.setvariable variable=kernel;]linux-yocto"
    fi
    if [ ${{ parameters.kernel }} == "intel" ]; then
      echo "##vso[task.setvariable variable=kernel;]linux-intel"
    fi
    if [ ${{ parameters.kernel }} == "chromium" ]; then
      echo "##vso[task.setvariable variable=kernel;]linux-chromium"
    fi

    ###
    ###  Set MACHINE
    ###
    if [ ${{ parameters.machine }} == "eve" ]; then
      echo "##vso[task.setvariable variable=machine;]eve-chromebook"
    fi
    if [ ${{ parameters.machine }} == "x86" ]; then
      echo "##vso[task.setvariable variable=machine;]x86-chromebook"
    fi
    if [ ${{ parameters.machine }} == "mediatek8173" ]; then
      echo "##vso[task.setvariable variable=machine;]mediatek8173-chromebook"
    fi
  displayName: 'Create build configuration'

- bash: |
    ###
    ###  Since we'll be upgrading later, we need to remove anything we dont want so we dont upgrade it either (legacy)
    ###
    
    # sudo DEBIAN_FRONTEND=noninteractive apt update
    # sudo DEBIAN_FRONTEND=noninteractive apt purge google-chrome-stable firefox google-cloud-sdk heroku snapd bazel '?name(ghc.*)'

    # Remove unneeded dependencies leftover
    # sudo DEBIAN_FRONTEND=noninteractive apt autoremove --purge >/dev/null
    # sudo DEBIAN_FRONTEND=noninteractive apt autoclean >/dev/null
    # sudo DEBIAN_FRONTEND=noninteractive apt clean >/dev/null
    if [ "${DEBUG_PIPE}" == "1" ]; then
      # Tools to debug space usage
      sudo DEBIAN_FRONTEND=noninteractive apt -yq install durep wajig >/dev/null
      wajig large
      df -h
    fi
  displayName: 'Clean up container packages'


- bash: |
    ###
    ###  Install YP dependencies
    ###
    sudo DEBIAN_FRONTEND=noninteractive apt update
    sudo DEBIAN_FRONTEND=noninteractive apt upgrade
    # Dependencies from the Yocto Quickstart
    until sudo DEBIAN_FRONTEND=noninteractive apt install gawk wget git-core diffstat unzip texinfo gcc-multilib \
    build-essential chrpath socat cpio python python3 python3-pip python3-pexpect \
    xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev \
    pylint3 xterm
    do
      echo "Failed updating, trying again..."
      sleep 1
    done
  continueOnError: false
  displayName: 'Upgrade and install dependencies'

- bash: |
    if [ "${DEBUG_PIPE}" == "1" ]; then
      echo "Free space before"
      df -h
    fi
    sudo DEBIAN_FRONTEND=noninteractive apt autoremove --purge
    sudo DEBIAN_FRONTEND=noninteractive apt autoclean
    sudo DEBIAN_FRONTEND=noninteractive apt clean
    sudo DEBIAN_FRONTEND=noninteractive apt-get clean
    sudo DEBIAN_FRONTEND=noninteractive apt-get autoclean
    if [ "${DEBUG_PIPE}" == "1" ]; then
      echo "Free space after"
      df -h
    fi
  displayName: 'Clean up leftover dependencies'

- bash: |
    if [ "${DEBUG_PIPE}" == "1" ]; then
      echo "Debug variables:"
      echo Build.SourceBranch $(Build.SourceBranch)
      echo Build.SourceBranchName $(Build.SourceBranchName)
      echo "Free space before"
      df -h
      echo "Freeing up disk space"
    fi

    ###
    ###  Remove files kept to free up even more space
    ###
    #### There are a lot of tools that we dont need inside the container

    # Check space or old commits to add to this list
    # export TOFREE="/usr/share/dotnet /usr/share/rust /usr/local/go* /usr/lib/jvm"
    
    # This cant be done in parallel
    # for i in ${TOFREE};do sudo rm -rf $i; done;

    if [ "${DEBUG_PIPE}" == "1" ]; then
      df -h
      du -Sh / 2>/dev/null | sort -rh | head -n 200
      du -akS -d 4  / 2>/dev/null | sort -n -r | head -n 50
      durep -td 3
      echo "Creating downloads and sstate directories"
    fi
  displayName: 'Purge container'

- bash: |

    ###
    ###  Create local directories
    ###
    sudo mkdir $(DL_DIR)
    sudo mkdir $(SSTATE_DIR)
    sudo mkdir $(SSTATE_MIRRORS_DIR)
    sudo mkdir $(DEPLOY_ARTIFACTS_DIR)
    sudo chown vsts:vsts $(SSTATE_DIR)
    sudo chown vsts:vsts $(DL_DIR)
    sudo chown vsts:vsts $(SSTATE_MIRRORS_DIR)
    sudo chown vsts:vsts ${DEPLOY_ARTIFACTS_DIR}
    
    cd ~/
    echo "Cloning Yocto Project"
    echo "Building Yocto branch: ${BRANCHNAME}"

    ###
    ###  In case we need local changes
    ###
    # git clone https://github.com/aehs29/poky.git -b
    git clone git://git.yoctoproject.org/poky -b ${BRANCHNAME}
    cd poky
    git clone https://git.yoctoproject.org/git/meta-intel -b ${BRANCHNAME}
    git clone git://git.openembedded.org/meta-openembedded -b ${BRANCHNAME}
  continueOnError: false
  displayName: 'Clone Repositories'

- bash: |
    # Add layers and create local.conf
    echo "Creating proper bblayers.conf"
    cd ~/poky
    source oe-init-build-env
    echo "SSTATE_DIR = \"${SSTATE_DIR}\"" >> ./conf/local.conf
    echo "DL_DIR = \"${DL_DIR}\"" >> ./conf/local.conf
    echo "DISTRO = \"${DISTRO}\"" >> ./conf/local.conf

    ###
    ###  Sstate and Downloads fetching
    ###
    echo "AZ_SAS = \"$(SAS_TOKEN)\"" >> ./conf/local.conf
    echo "SSTATE_MIRRORS=\" file://.* az://ypcache.blob.core.windows.net/sstate-cache/PATH;downloadfilename=PATH \n\"" >> ./conf/local.conf
    # echo "PREMIRRORS_prepend=\" git://.*/.* az://sstate.blob.core.windows.net/downloads/ \n ftp://.*/.* az://sstate.blob.core.windows.net/downloads/ \n http://.*/.* az://sstate.blob.core.windows.net/downloads/ \n https://.*/.* az://sstate.blob.core.windows.net/downloads/ \n \"" >> ./conf/local.conf

    ###
    ###  Slower builds but more space
    ###
    # echo "INHERIT += \"rm_work\"" >> ./conf/local.conf

    ###
    ###  Add required layers
    ###
    bitbake-layers add-layer ../meta-intel
    bitbake-layers add-layer ../meta-openembedded/meta-oe
    bitbake-layers add-layer ../meta-openembedded/meta-python
    bitbake-layers add-layer ../meta-openembedded/meta-networking
    bitbake-layers add-layer $(Build.SourcesDirectory)

    if [ "${DEBUG_PIPE}" == "1" ]; then
      echo "bblayers.conf:"
      cat conf/bblayers.conf
    fi
  continueOnError: false
  displayName: 'Create bitbake configuration'